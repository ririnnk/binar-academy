<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3"
      crossorigin="anonymous"
    />

    <title>RPS GAME</title>

    <!-- Private CSS -->
    <link rel="stylesheet" href="./css/style.css" />
  </head>

  <!-- Main Content -->
  <body id="gamePBody">
    <div id="mainGP">
      <div class="MainContent">
        <div class="Player1">
          <h2 class="P1Title">PLAYER 1</h2>
          <button id="playB" class="optionBtnP1" onclick="pickOption('playB')">
            <img src="batu.png" alt="batu" class="optionP1" />
          </button>
          <button id="playK" class="optionBtnP1" onclick="pickOption('playK')">
            <img src="kertas.png" alt="batu" class="optionP1" />
          </button>
          <button id="playG" class="optionBtnP1" onclick="pickOption('playG')">
            <img src="gunting.png" alt="batu" class="optionP1" />
          </button>
          <h6 id="playerName">playerName</h6>
        </div>
        <div class="midcontainer">
          <h1 id="VStext">VS</h1>
          <div id="P1Win">PLAYER 1 WIN</div>
          <div id="ComWin">COM WIN</div>
          <div id="Draw">DRAW</div>
        </div>
        <div class="Player1">
          <h2 class="P1Title">COM</h2>
          <button id="comB" class="optionBtnCom">
            <img src="batu.png" alt="batu" class="optionP1" />
          </button>
          <button id="comK" class="optionBtnCom">
            <img src="kertas.png" alt="kertas" class="optionP1" />
          </button>
          <button id="comG" class="optionBtnCom">
            <img src="gunting.png" alt="gunting" class="optionP1" />
          </button>
        </div>
      </div>
    </div>

    <!-- Header -->
    <div class="gameTitle">
      <a class="GPBackLink" href="/room">&lt;</a>
      <img id="GPlogo" src="img/gamePLogo.png" alt="logoLamanGame" />
      <h1 id="gamePjudul">ROCK PAPER SCRISSORS</h1>
    </div>

    <!-- Refresh -->
    <button class="BtnRf">
      <img
        src="refresh.png"
        alt="rfsh"
        onclick="pickOption('R')"
        class="RfImg"
      />
    </button>

    <script>
      let dataUser = getCookie("user-data");
      if (dataUser == null) {
        alert("You Haven't logged in yet...");
        window.location.href = "/login";
      } else {
        document.getElementById("playerName").innerHTML = `${
          JSON.parse(getCookie("user-data"))[0].user
        }`;
        document.getElementById("mainGP").style.display = "flex";
      }
      function getCookie(name) {
        var nameEQ = name + "=";
        var ca = document.cookie.split(";");
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == " ") c = c.substring(1, c.length);
          if (c.indexOf(nameEQ) == 0)
            return c.substring(nameEQ.length, c.length);
        }
        return null;
      }
      class Ready {
        constructor() {
          this.botOption;
          this.playerOpt;
          this.VStext = "none";
          this.P1win = "none";
          this.ComWin = "none";
          this.Draw = "none";
        }
        get getBotOpt() {
          return this.botOption;
        }
        set setBotOpt(opt) {
          this.botOption = opt;
        }
        get getPlayerOpt() {
          return this.playerOpt;
        }
        set setPlayerOpt(opt) {
          this.playerOpt = opt;
        }
        BotBrain() {
          const option = ["comB", "comK", "comG"];
          const bot = option[Math.floor(Math.random() * option.length)];
          return bot;
        }
        //Arrow Function, Change Id to Active/Grey Background
        activeElement = (id) =>
          (document.getElementById(id).style.backgroundColor = "#C4C4C4");
        //Arrow Function, Change Id to transparent Background
        pasiveElement = (id) =>
          (document.getElementById(id).style.backgroundColor = "transparent");
        setElement(g, h, i, j) {
          document.getElementById("VStext").style.display = g;
          document.getElementById("P1Win").style.display = h;
          document.getElementById("ComWin").style.display = i;
          document.getElementById("Draw").style.display = j;
        }
        winCalculation() {
          const botOpt = this.botOption;
          const playID = ["playB", "playK", "playG"];
          const comID = ["comB", "comK", "comG"];
          const BGK = ["âœŠ", "âœ‹", "âœŒ"];
          let win = 0;
          let draw = 0;
          let lose = 0;
          let oponent = "BOT";
          let scheme = "ðŸª¨ vs ðŸª¨";
          let timestamp = Date.now();
          for (let i = 0; i < playID.length; i++) {
            for (let j = 0; j < comID.length; j++) {
              if (this.playerOpt == playID[i]) {
                this.activeElement(playID[i]);
                if (botOpt == comID[j]) {
                  this.activeElement(comID[j]);
                  if (i - j == 0) {
                    this.Draw = "flex";
                    scheme = `P1 ${BGK[i]} vs BOT ${BGK[j]} (DRAW)`;
                    draw = 1;
                    // console.log(scheme);
                  } else if (i - j == -1 || i - j == 2) {
                    this.ComWin = "flex";
                    scheme = `P1 ${BGK[i]} vs BOT ${BGK[j]} (BOT WIN)`;
                    lose = 1;
                    // console.log(scheme);
                  } else if (i - j == 1 || i - j == -2) {
                    this.P1win = "flex";
                    scheme = `P1 ${BGK[i]} vs BOT ${BGK[j]} (P1 WIN)`;
                    win = 1;
                    // console.log(scheme);
                  }
                } else {
                  this.pasiveElement(comID[j]);
                }
              } else if (this.playerOpt == "R") {
                this.VStext = "flex";
                this.pasiveElement(playID[i]);
                this.pasiveElement(comID[j]);
              } else {
                this.pasiveElement(playID[i]);
              }
            }
          }
          this.setElement(this.VStext, this.P1win, this.ComWin, this.Draw);
          let userCookie = getCookie("user-data");
          let user = JSON.parse(getCookie("user-data"))[0].user;
          fetch(`/games/${JSON.parse(userCookie)[0].id}`, {
            method: "post",
            headers: { "Content-type": "application/json" },
            body: JSON.stringify({
              user: user,
              win: win,
              draw: draw,
              lose: lose,
              scheme: scheme,
              oponent: oponent,
              timestamp: timestamp,
            }),
          })
            .then((response) => {
              return response.json();
            })
            .then((result) => {
              console.log(scheme);
            })
            .catch((error) => console.log(error));
        }
      }
      function pickOption(p) {
        const ready = new Ready();
        ready.setPlayerOpt = p;
        ready.setBotOpt = ready.BotBrain();
        ready.winCalculation();
      }
      function getCookie(name) {
        var nameEQ = name + "=";
        var ca = document.cookie.split(";");
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == " ") c = c.substring(1, c.length);
          if (c.indexOf(nameEQ) == 0)
            return c.substring(nameEQ.length, c.length);
        }
        return null;
      }
    </script>
  </body>
</html>
